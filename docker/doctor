#!/usr/bin/env sh

s2e_docker_repo_url='https://github.com/stefanbucur/s2e_docker'
username="$(id -un)"

# Paths on host:
runname="$(basename "$0")"         # name of the script
runpath="$(readlink -f "$(dirname "$0")")"  # full path to script w/o scriptname
rundir="$(basename "$runpath")"    # directory name the script resides in
repopath="$(dirname "$runpath")"   # full path to chef repo
repodir="$(basename "$repopath")"  # name of chef repo (probably s2e-chef)
sharepath="$(dirname "$repopath")" # full path to shared dir. (repo-location/..)
tmppath="$runpath/${runname}.tmp"  # full path to temporary dir.

# Paths in container:
host_='/chef'                      # full path to shared dir.
host_repopath="$host_/$repodir"    # full path to chef repo
host_runpath="$host_repopath/$rundir"       # full path to script w/o scriptname

# HELPERS ======================================================================

die()
{
	retval=$1
	format="$2"
	shift 2
	printf "$format\n" "$@" >&2
	exit $retval
}

image_exists()
{
	docker inspect "$1" >/dev/null 2>&1
}

# COMMAND: PREPARE =============================================================
# `prepare` attempts to create a docker image containing all the required
# programs/libraries to build S²E-chef, along with the right LLVM version.
# If the image does not exist, it is created using the appropriate Dockerfile
# from https://github.com/stefanbucur/s2e_docker.

dr_prepare_usage()
{
	cat >&2 <<- EOF

	$0 prepare: Create and prepare base container

	Usage: $0 prepare [OPTIONS ...]

	Options:
	    -f   Force-rebuild container
	    -h   Show this help

	EOF
	exit 1
}

dr_prepare_repo()
{
	if [ ! -d "$tmppath/s2e_docker" ]; then
		mkdir -p "$tmppath"
		git clone "$s2e_docker_repo_url" "$tmppath/s2e_docker"
	else
		cd "$tmppath/s2e_docker"
		git pull
		cd -
	fi
}

dr_prepare_image()
{
	dockerimg="$username/s2e-$1"
	dockerdir="$tmppath/s2e_docker/image/$1"

	if image_exists "$dockerimg" && [ $forceprepare -eq 1 ]; then
		printf "\033[1;32m$1: image $dockerimg found, not rebuilding\033[0m\n"
		return
	else
		printf "\033[1;33m$1: image $dockerimg not found, building ...\033[0m\n"
	fi

	# XXX: 'FROM' line correction, temporarily
	if [ $1 = 'chef' ]; then
		# FIXME assuming $username doesn't contain problematic characters
		printf "%%s/stefanbucur/%s/g\nw\nq\n" "$username" | \
			ex -s "$dockerdir/Dockerfile" || true
	fi
	docker build --rm --tag="$dockerimg" "$dockerdir"
}

dr_prepare()
{
	# Options:
	forceprepare=1
	while getopts fh opt; do
		case "$opt" in
			f) forceprepare=0;;
			h) dr_prepare_usage;;
			'?') die 1 "Run \`$0 prepare -h\` for help."
		esac
	done
	shift $(($OPTIND - 1))

	# Trailing arguments:
	test -z "$1" || die 1 "Trailing command line: \`$@\`"

	# Images:
	dr_prepare_repo
	for i in base chef; do
		dr_prepare_image $i
	done
}

# COMMAND: BUILD ===============================================================
# `build` takes the base image that has been prepared with `prepare`, and builds
# the requested configuration of S²E-chef inside, resulting in a new docker
# container.

dr_build_usage()
{
	cat >&2 <<- EOF

	$0 build: Create new docker container that contains a compiled S²E-chef

	Usage: $0 build [OPTIONS ...] CONFIG

	Options:
	    -f   Force-rebuild S²E-chef
	    -h   Show this help

	Configs:
	    debug         Build S²E-chef in debug mode
	    release       Build S²E-chef in release mode

	EOF
	exit 1
}

dr_build()
{
	# Options:
	forcebuild=1
	while getopts fh opt; do
		case "$opt" in
			f) forcebuild=0;;
			h) dr_build_usage;;
			'?') die 1 "Run \`$0 build -h\` for help."
		esac
	done
	shift $(($OPTIND - 1))

	# Configuration:
	config="$1"
	test -n "$config" || dr_build_usage
	shift
	case "$config" in
		debug|release) ;;
		*) dr_build_usage;;
	esac

	# Trailing arguments:
	test -z "$1" || die 1 "Trailing command line: \`$@\`"

	# Run container:
	iname="$username/s2e-chef"
	image_exists "$iname" || \
		die 2 "$iname: image not found. Did you run \`$0 prepare\`?"
	ccmd=$(printf '%s/%s make %s %s' \
	              "$host_runpath" "$runname" \
	              "$(test $forcebuild -eq 0 && echo "-f")" $config)
	docker run --name=zopf_$config -t -i -v "$sharepath":"$host_" "$iname" $ccmd
}

# COMMAND: MAKE ================================================================
# `make` builds S²E-chef from within a docker container.
# NOTE: This command is not supposed to be run by the user (or if so, from
# within the container - but that usually means something went wrong somewhere).
# It is invoked from `build` during the creation of the configuration-specific
# container.

dr_make_usage()
{
	cat >&2 <<- EOF

	$0 make: Build S²E-chef from within the container

	Usage: $0 make [OPTIONS ...] CONFIG

	Options:
	    -f   Force recompilation
	    -h   Show this help

	Run \`$0 build -h\` for a list of supported configurations.

	NOTE:
	You are not supposed to run this command. See \`$0 build\`.
	If you feel like you need to run this command, something must've gone wrong.

	EOF
	exit 1
}

dr_make()
{
	# Options:
	forcemake=1
	while getopts fh opt; do
		case "$opt" in
			f) forcemake=0;;
			h) dr_make_usage;;
			'?') die 1 "Run \`$0 make -h\` for help."
		esac
	done
	shift $(($OPTIND - 1))

	# Configuration:
	config="$1"
	case "$config" in
		debug|release) builddir=build-$config;;
		*) dr_make_usage;;
	esac
	shift

	# Trailing arguments:
	test -z "$1" || die 1 "Trailing command line: \`$@\`"

	# Set up build directory:
	ln -s "$host_repopath" s2e
	test ! -d "$builddir" || test $forcemake -eq 0 || die 4 '%s %s' \
	    "Build directory $builddir already exists." \
	    "Pass \`-f\` to force rebuild."
	mkdir "$builddir"
	cd "$builddir"
	ln -s "$host_repopath/Makefile.docker" Makefile

	# Build chef:
	make all-$config guest-tools
}

# COMMAND: RUN =================================================================
# `run` runs tests with the compiled S²E-chef.

dr_run()
{
	# TODO
	die 127 'this function is not implemented yet'
}

# MAIN =========================================================================

usage()
{
	cat >&2 <<- EOF

	$0: Create docker containers, and build and run S²E-chef inside

	Usage: $0 COMMAND [ARGS ...]

	Commands:
	    prepare  Create and prepare the base container
	    build    Build S²E-chef inside a container
	    make     Build S²E-chef (to be called from within the container)
	    run      Run a test in a docker container

	Run \`$0 COMMAND -h\` for more information on a specific command.

	EOF
	exit 1
}

main()
{
	# Get command:
	cmd="$1"
	test -n "$cmd" || usage
	shift

	# Check docker permission:
	if [ "$cmd" != 'make' ] && ! docker ps >/dev/null 2>&1; then
		die 2 '%s %s' \
		      'You do not seem to have the permission to run docker.' \
		      "Make sure you are in the 'docker' group or run $runname as root."
	fi

	# Execute command:
	set -e
	case "$cmd" in
		prepare) dr_prepare "$@" ;;
		build) dr_build "$@" ;;
		run) dr_run "$@" ;;
		make) dr_make "$@" ;;
		*) usage ;;
	esac
	set +e
}

main "$@"
